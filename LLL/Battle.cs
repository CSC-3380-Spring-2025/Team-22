using Godot;
using System;

public partial class Battle : Node2D
{
	// Defining stats
	public static int laikaAttack = 6;
	public static int laikaMaxHealth = 20;
	public static int laikaHealth = laikaMaxHealth;
	public static int enemyAttack = 4;
	public static int enemyMaxHealth = 15;
	public static int enemyHealth = enemyMaxHealth;
	
	//Defining status effects
	public static int poison = 0;
	public static int acid = 0;
	public static int screech = 0;
	public static bool stealth = false;
	public static bool lick = false;
	public static bool burned = false;
	public static bool defending = false;
	public static bool waiting = true;
	
	//Defining cooldowns
	public static int biteCooldown = 0;
	public static int howlCooldown = 0;
	public static int stealthCooldown = 0;
	public static int lickCooldown = 0;
	public static int burnCooldown = 0;
	
	//Defining learned moves (will change to plug in data from another scene)
	public static bool learnedStealth = false;
	public static bool learnedLick = false;
	public static bool learnedBurn = false;
	
	//Defining scene elements (UI buttons, texts)
	[Export]
	MenuButton Fight;
	Button Defend;
	MenuButton Items;
	Button Flee;
	RichTextLabel Text;
	RichTextLabel LaikaStats;
	RichTextLabel AlienStats;
	
	//Runs when scene first loads
	public override void _Ready() {
		//Gets MenuButton Fight, then gets the popup menu generated by it, then sets its functionality to _Fight()
		Fight = GetNode<MenuButton>("Fight");
		PopupMenu FightPopup = Fight.GetPopup();
		FightPopup.Connect("id_pressed", new Callable(this, "_Fight"));
		
		if(learnedStealth == true) {		//If Stealth is learned, adds move
			FightPopup.AddItem("Stealth");
		}
		if(learnedLick == true) {			//If Lick is learned, adds move
			FightPopup.AddItem("Lick");
		}
		if(learnedBurn == true) {			//If Burn is learned, adds move
			FightPopup.AddItem("Burn");
		}
		
		//Gets MenuButton Items, then gets the popup menu generated by it, then sets its functionality to _Items()
		Items = GetNode<MenuButton>("Items");
		PopupMenu ItemsPopup = Items.GetPopup();
		ItemsPopup.Connect("id_pressed", new Callable(this, "_Items"));
		
		//Gets the text in the scene
		Text = GetNode<RichTextLabel>("Text");
		LaikaStats = GetNode<RichTextLabel>("LaikaStats");
		LaikaStats.Text = (laikaHealth + "/" + laikaMaxHealth + " HP\n" + laikaAttack + " ATK");
		AlienStats = GetNode<RichTextLabel>("AlienStats");
		AlienStats.Text = (enemyHealth + "/" + enemyMaxHealth + " HP\n" + enemyAttack + " ATK");
	}
	
	public void _Fight(int index) {		//Fight function
		GD.Print("Fighting!");
		switch(index) {
			case 0:		//Scratch
				if(screech > 0 && burned == true) {
					Text.Text = ("Laika weakly attacks the burnt enemy and deals " + laikaAttack + " damage!");
					enemyHealth = enemyHealth - laikaAttack;
					burned = false;
				}
				else if(screech > 0) {
					Text.Text = ("Laika weakly attacks the enemy and deals " + laikaAttack/2 + " damage!");
					enemyHealth = enemyHealth - (laikaAttack/2);
				}
				else if(burned == true) {
					Text.Text = ("Laika attacks the burnt enemy and deals " + laikaAttack * 2 + " damage!");
					enemyHealth = enemyHealth - (laikaAttack * 2);
					burned = false;
				}
				else {
					Text.Text = ("Laika attacks the enemy and deals " + laikaAttack + " damage!");
					enemyHealth = enemyHealth - laikaAttack;
				}
				waiting = false;
				afterTurn();
				break;
			case 1:		//Bite
				if(biteCooldown == 0) {
					Text.Text = ("Laika bites the enemy, dealing " + laikaAttack/2 + " damage for the next few turns!");
					enemyHealth = enemyHealth - laikaAttack/2;
					poison = 3;
					
					burned = false;
					biteCooldown = 2;
					waiting = false;
					afterTurn();
				}
				else {
					Text.Text = ("Bite's cooldown is at " + biteCooldown + "!");
				}
				break;
			case 2:		//Howl
				if(howlCooldown == 0) {
					Text.Text = ("Laika howls, healing herself for " + laikaAttack + " health!");
					if (laikaHealth + laikaAttack <= laikaMaxHealth) {
						laikaHealth = laikaHealth + laikaAttack;
					}
					else {
						laikaHealth = laikaMaxHealth;
					}
					
					burned = false;
					howlCooldown = 2;
					waiting = false;
					afterTurn();
				}
				else {
					Text.Text = ("Howl's cooldown is at " + howlCooldown + "!");
				}
				break;
			case 3:		//Stealth
				if(stealthCooldown == 0) {
					Text.Text = ("Laika retreats into the darkness, avoiding anything that might hit her...");
					stealth = true;
					
					burned = false;
					stealthCooldown = 3;
					waiting = false;
					afterTurn();
				}
				else {
					Text.Text = ("Stealth's cooldown is at " + stealthCooldown + "!");
				}
				break;
			case 4:		//Lick
				if(lickCooldown == 0) {
					Text.Text = ("Laika licks the enemy, covering them in spit!");
					if(burned == true) {
						Text.Text = ("Mmm, cooked... Laika heals " + (enemyHealth * 2) + " health and weakens the enemy's next attack!");
						if (laikaHealth + (enemyHealth * 2) <= laikaMaxHealth) {
							laikaHealth = laikaHealth + (enemyHealth * 2);
						}
						else {
							laikaHealth = laikaMaxHealth;
						}
						burned = false;
					}
					else {
						Text.Text = ("Laika heals " + enemyHealth/2 + " health and weakens the enemy's next attack!");
						if (laikaHealth + (enemyHealth/2) <= laikaMaxHealth) {
							laikaHealth = laikaHealth + (enemyHealth/2);
						}
						else {
							laikaHealth = laikaMaxHealth;
						}
					}
					
					lick = true;
					lickCooldown = 3;
					waiting = false;
					afterTurn();
				}
				else {
					Text.Text = ("Lick's cooldown is at " + lickCooldown + "!");
				}
				break;
			case 5:		//Burn
				if(burnCooldown == 0) {
					Text.Text = ("Laika releases gas from her oxygen tanks, igniting the very air itself!");
					Text.Text = ("Intense fire burns the enemy, dealing " + laikaAttack + " damage- and the burns enhance the effectivity of Laika's next move!");
					enemyHealth = enemyHealth - laikaAttack;
					
					burned = true;
					burnCooldown = 5;
					waiting = false;
					afterTurn();
				}
				else {
					Text.Text = ("Burn's cooldown is at " + burnCooldown + "!");
				}
				break;
		}
	}

	public void _Defend() {		//Defend function
		GD.Print("Defending!");
		defending = true;
		waiting = false;
		afterTurn();
	}
	
	public void _Items(int index) {		//Items function (will add more items as they're designed)
		GD.Print("Iteming!");
		switch(index) {
			case 0:		//Moon Rock
				Text.Text = ("Laika throws out a moon rock, hitting the enemy for 10 attack!");
				enemyHealth = enemyHealth - 10;
				break;
			case 1:		//Iron Rod
				Text.Text = ("Laika swings a rod, hitting the enemy for " + laikaAttack * 2 + " attack!");
				enemyHealth = enemyHealth - (laikaAttack * 2);
				break;
			case 2:		//Dog Treat
				Text.Text = ("Laika eats a treat, healing herself for 10 health!");
				if (laikaHealth + 10 <= laikaMaxHealth) {
					laikaHealth = laikaHealth + 10;
				}
				else {
					laikaHealth = laikaMaxHealth;
				}
				break;
		}
		waiting = false;
		afterTurn();
	}
	
	public void _Flee() {		//Flee function (will change to move scene to Overworld)
		GetTree().ChangeSceneToFile("res://Scenes/Overworld.tscn");
	}
	
	public void afterTurn() {	//Runs after every Laika/Alien turn
		if(poison == 3) {	//If poison already equals 3, just decrease it once
			poison--;
		}
		else if(poison > 0 && waiting == false) {	//If poison is greater than 0 and it's no longer Laika's turn, damages enemy
			Text.Text = ("Additionally, Laika deals " + laikaAttack/2 + " extra damage to the enemy!");
			enemyHealth = enemyHealth - (laikaAttack/2);
			poison--;
		}
		if(acid == 3) {		//If acid already equals 3, just decrease it once
			acid--;
		}
		else if(acid > 0 && waiting == false) {		//If acid is greater than 0 and it's no longer Laika's turn, damages Laika
			Text.Text = ("Ow-! Laika receives " + enemyAttack/2 + " damage from excess acid!");
			laikaHealth = laikaHealth - (enemyAttack/2);
			acid--;
		}
		if(screech > 0 && waiting == true) {	//If it's Laika's turn, decrements screech until her debuff reaches 0
			screech--;
		}
		
		// If it's Laika's turn, decrements any cooldowns she may have
		if(biteCooldown > 0 && waiting == true) {
			biteCooldown--;
		}
		if(howlCooldown > 0 && waiting == true) {
			howlCooldown--;
		}
		if(stealthCooldown > 0 && waiting == true) {
			stealthCooldown--;
		}
		if(lickCooldown > 0 && waiting == true) {
			lickCooldown--;
		}
		if(burnCooldown > 0 && waiting == true) {
			burnCooldown--;
		}
		
		//Sets both Laika and the alien stats to their current values
		LaikaStats.Text = (laikaHealth + "/" + laikaMaxHealth + " HP\n" + laikaAttack + " ATK");
		AlienStats.Text = (enemyHealth + "/" + enemyMaxHealth + " HP\n" + enemyAttack + " ATK");
		
		//If the enemy's health gets too low, they die and you win; otherwise, they get to keep moving
		if(enemyHealth <= 0) {
			Text.Text = ("The alien attacking you falls over, unconscious...");
			Text.Text = ("You win!");
		}
		else if(enemyHealth > 0 && waiting == false) {
			alienMove();
		}
		
		//If your health gets too low, you collapse and you lose
		if(laikaHealth <= 0) {
			Text.Text = ("You collapse, the space's endless night consuming you...");
			Text.Text = ("Game over!");
		}
		
		if(waiting == true) {
			Text.Text = ("[YOUR TURN]");
		}
	}
	
	public void alienMove() {		//Alien's move
		Random rand = new Random();
		int enemyOption = rand.Next(1, 6);
		GD.Print("[ALIEN TURN]");
		switch(enemyOption) {
			case 0:		//Screech: 1/6 chance
				Text.Text = ("The alien lets out a harrowing screech!");
				if(defending == true) {
					Text.Text = ("You brace through the sound, going unaffected!");
				}
				else if(stealth == true) {
					Text.Text = ("Even while in the shadows, the effects of the sound get to you!");
					screech = 3;
				}
				else {
					Text.Text = ("You get stunned, and your hits won't be as effective for 3 turns...");
					screech = 3;
				}
				break;
			case 1: case 2:		//Acid: 2/6 chance
				if(stealth == true) {
					Text.Text = ("The alien spits out a gross acid, but it misses!");
				}
				else {
					Text.Text = ("The alien spits out a gross acid, dealing " + enemyAttack/2 + " damage for the next few turns!");
					laikaHealth = laikaHealth - enemyAttack/2;
					defending = false;
					acid = 3;
				}
				break;
			case 3: case 4: case 5:		//Pound: 3/6 chance
				Text.Text = ("The alien's arms stretch out and attack you!");
				if(defending == true) {
					Text.Text = ("You defend it, only receiving " + (enemyAttack - (laikaAttack/2)) + " damage!");
					defending = false;
					laikaHealth = laikaHealth - (enemyAttack - (laikaAttack/2));
				}
				else if (lick == true) {
					Text.Text = ("Weakened, the enemy only deals " + enemyAttack/2 + " damage!");
					lick = false;
					laikaHealth = laikaHealth - (enemyAttack/2);
				}
				else {
					Text.Text = ("You receive " + enemyAttack + " damage!");
					laikaHealth = laikaHealth - enemyAttack;
				}
				break;
		}
		waiting = true;
		afterTurn();
		return;
	}
}
